* Sprint
** Dev should be able to post to an existing review using rid with a different CL
   One bit of complication here is that rbt does not update the CL in
   the review with a new CL number.  So, if someone tries to do a
   submit using the new CL, that will fail.  They'll need to use the
   rid and the CL, but since that's how they're creating it, it's not
   to weird.

   Ah, but the other problem is when you use the --publish option.
   How does rbt handle that?  Handles it fine, because it uses the
   rid. You should too.


   Now, for the million dollar question - should you update the CL
   when you submit?  I think so.

*** TODO Email rbtools list about having rid option update cl in review
*** TODO Dev creates a new CL and posts it to an open review
    This works out of the box with p2 because we pass rid along.
*** TODO Dev creates a new CL and posts it to an open review with publish option
    This fails because we now have a CL mismatch and we're not using
    the rid for some reason.
*** TODO Dev creates a new CL and posts it to a closed review
    What does rbt do in this case? It doesn't allow it. It tells you
    to reopen it if you really want to do this.
*** TODO Dev submits one of these beasties and we update the CL in RB
    We should really just do this on all review even though RB does
    it for the standard use cases. The reason is because our update
    will be immediate and won't require special case code for this.

* Product Backlog
** Dev should be able to post a review from the mergeit account
   For this, we need to handle the --username option.

** Dev should be able to have review automatically open in browser

** The developer should be able to 'submit' a review that was never published

   Though a corner case, the developer should not see this ugly output
   if they try to do a submit on a rr they never published:

   % ./p2.py submit 819
   CRITICAL:root:HTTP 500
   CRITICAL: HTTP 500
   
   % p4 opened
   p4 opened
   File(s) not opened on this client.

   It's coming from rbt itself:
   % rbt close -d 819
>>> RBTools 0.7.2
>>> Python 2.7.5 (default, Nov  3 2014, 14:26:24) 
[GCC 4.8.3 20140911 (Red Hat 4.8.3-7)]
>>> Running on Linux-3.18.9-100.fc20.x86_64-x86_64-with-fedora-20-Heisenbug
>>> Home = /home/sallan
>>> Current directory = /home/sallan/Projects/RBScript
>>> Making HTTP GET request to http://localhost/api/
>>> Making HTTP GET request to http://localhost/api/review-requests/819/
>>> Got API Error 100 (HTTP code 404): Object does not exist
>>> Error data: {u'stat': u'fail', u'err': {u'msg': u'Object does not exist', u'code': 100}}
Traceback (most recent call last):
  File "/usr/bin/rbt", line 9, in <module>
    load_entry_point('RBTools==0.7.2', 'console_scripts', 'rbt')()
  File "/usr/lib/python2.7/site-packages/RBTools-0.7.2-py2.7.egg/rbtools/commands/main.py", line 133, in main
    command.run_from_argv([RB_MAIN, command_name] + args)
  File "/usr/lib/python2.7/site-packages/RBTools-0.7.2-py2.7.egg/rbtools/commands/__init__.py", line 555, in run_from_argv
    exit_code = self.main(*args) or 0
  File "/usr/lib/python2.7/site-packages/RBTools-0.7.2-py2.7.egg/rbtools/commands/close.py", line 56, in main
    request = get_review_request(request_id, api_root)
  File "/usr/lib/python2.7/site-packages/RBTools-0.7.2-py2.7.egg/rbtools/utils/commands.py", line 29, in get_review_request
    % (review_request_id, e))
rbtools.commands.CommandError: Error getting review request 819: Object does not exist (HTTP 404, API Error 100)    


* Done
** DONE Dev should be able to submit a review with a shelve

** DONE The developer should not have to use the --shelve option if the CL has already been shelved.     
** DONE Dev should be able to shelve a change when creating or editing a review
*** Use cases
**** DONE New review without --publish option
     In this case, create the shelve and add a comment to the review about the shelve
**** DONE New review with the --publish option
     Here we need to not pass --publish (already tested). We create
     the shelve and the new review, then we add the shelve comment,
     then we need to publish the review.
**** DONE Update review with --shelve option
     Same idea as the 2 above.
**** DONE Update review without --shelve option
     This is a new case. I think we should be able to auto-detect a
     shelved change and automatically update the shelve for the
     user. There is no good reason I can think of for having a review
     with a shelve that is out of date.

** DONE Dev can submit even without ship its using the --force option
** DONE Dev can submit the review and it will block if no ship its or Review Bot ship its only
** DONE Dev should be able to enter options and args in any order (unlike with rbt)
    We always require 1 argument - an action. Most of the time we also
    require a change list number, though it's optional if the action
    is create. The user may pass who knows what, including multiple
    actions, changelists, their password, who knows?  The program
    should handle all that gracefully.

*** DONE No arguments
     If a user passes no arguments, print help and exit.

*** DONE Action, but no changelist
     This is only valid if the action is create.

*** DONE Changelist but no action

*** DONE Multiple actions

*** DONE Multiple changelists

*** DONE Any extra junk they may decide to type in

** DONE If dev enters unrecognized or bad input, print useful message
** DONE Allow dev to create a new review from default change list
** DONE Jobs in CL should be automatically entered in RB Bugs field
** DONE User config file needs to be honored
   Right now you're hard-coding the url. Take that out and watch your
   tests fail, then...
** DONE Write unit tests for user config processing

** DONE [[Have%20automated%20functional%20tests][Automated Functional Tests]]
*** DONE Script to create new p4 repo
*** DONE Script to create new RB instance
**** DONE Create new site with admin account
    - Stop web service and delete old instance
    - Create new instance with admin account set up
    - Start web service 
**** DONE Be able to create 2 user accounts without admin rights in automated fashion
     This is not supported by the api. I'll work around it by creating
     an account for sallan as admin during installation.  That will
     allow me to test most use cases.
**** DONE Add perforce repo to new RB site
**** DONE Create p4 client for testing - template would be easiest way
**** DONE Be able to create a new review and verify it's content
*** DONE Basic functional test
    - create rr 1 with 1 bug and a branch, assign and publish
    - update rr 1
    - create rr 2 with branch, assign and publish
    - submit rr 2 with -f
    - submit rr 1 with -f

    I was going to verify the cl was updated, but that proved
    difficult and visual inspection was sufficient. Besides,I don't
    want to spend a lot of time testing rbt functionality.

** DONE Code cleanup and refactor
